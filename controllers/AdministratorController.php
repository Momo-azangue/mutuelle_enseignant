<?php
/**
 * Created by PhpStorm.
 * User: medric
 * Date: 23/12/18
 * Time: 20:03
 */

namespace app\controllers;


use app\managers\AdministratorSessionManager;
use app\managers\FinanceManager;
use app\managers\MailManager;
use app\managers\RedirectionManager;
use app\managers\SettingManager;
use app\models\Administrator;
use app\models\Agape;
use app\models\Borrowing;
use app\models\BorrowingSaving;
use app\models\Contribution;
use app\models\Exercise;
use app\models\forms\AgapeForm;
use app\models\forms\HelpTypeForm;
use app\models\forms\IdForm;
use app\models\forms\NewAdministratorForm;
use app\models\forms\NewBorrowingForm;
use app\models\forms\NewContributionForm;
use app\models\forms\NewHelpForm;
use app\models\forms\NewMemberForm;
use app\models\forms\NewRefundForm;
use app\models\forms\NewSavingForm;
use app\models\forms\NewSessionForm;
use app\models\forms\NewTontineForm;
use app\models\forms\SettingForm;
use app\models\forms\TontineTypeForm;
use app\models\forms\UpdatePasswordForm;
use app\models\forms\UpdateSocialInformationForm;
use app\models\Help;
use app\models\HelpType;
use app\models\Member;
use app\models\Refund;
use app\models\Saving;
use app\models\Session;
use app\models\Tontine;
use app\models\TontineType;
use app\models\User;
use DateTime;
use Yii;
use yii\base\Security;
use yii\data\Pagination;
use yii\web\Controller;
use yii\web\UploadedFile;
use yii\data\ActiveDataProvider;
use yii\web\NotFoundHttpException;
use app\models\Agape3;
class AdministratorController extends Controller
{
    public $layout = "administrator_base";
    public $user;
    public $administrator;
    public $defaultAction = "accueil";


    public function beforeAction($action)
    {

        if (!\Yii::$app->user->getIsGuest()) {

            $user = User::findOne(\Yii::$app->user->getId());


            if ($user->type === "ADMINISTRATOR") {
                $this->user = $user;
                $this->administrator = Administrator::findOne(['user_id' => $user->id]);
                $this->view->params = ['user' => $this->user, 'administrator' => $this->administrator];
                return parent::beforeAction($action); // TODO: Change the autogenerated stub
            } elseif ($user->type === "MEMBER") {
                \Yii::$app->response->redirect("@member.home");
            } else
                return RedirectionManager::abort($this);;
        } else {
            \Yii::$app->response->redirect("@guest.connection");
        }
    }


    public function actionAccueil()
    {
        AdministratorSessionManager::setHome();
        $session = Session::findOne(['active' => true]);
        $idModel = new IdForm();
        if ($session)
            $idModel->id = $session->id;
        $model = new NewSessionForm();
        return $this->render('home', compact('session', 'model', 'idModel'));
    }

    public function actionNouvelleSession()
    {
        if (Yii::$app->request->getIsPost()) {
            $idModel = new IdForm();
            $model = new NewSessionForm();
            $session = null;
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                // Traitement de l'exercice
                $exercise = Exercise::findOne(['active' => true]);
                if ($exercise) {
                    // S'il y a un exercice en cours
                    if (count(Session::findAll(['exercise_id' => $exercise->id])) >= 12) {
                        // S'il ya deja 12 sessions pour cet exercice
                        $exercise->active == false;
                        $exercise->save();

                        $exercise = new Exercise();
                        $exercise->year = (int)(new DateTime())->format("Y");
                        $exercise->save();

                    }
                } else {
                    // S'il n'y a pas, on le crée
                    $exercise = new Exercise();
                    $exercise->year = $model->year;
                    $exercise->administrator_id = $this->administrator->id;
                    $exercise->save();
                }

                $session = new Session();
                $session->administrator_id = $this->administrator->id;
                $session->exercise_id = $exercise->id;
                $session->date = $model->date;
                $session->save();

                foreach (Member::find()->all() as $member) {
                    MailManager::alert_new_session($member->user(), $session);
                }

                return $this->redirect("@administrator.home");
            } else {
                return $this->render('home', compact('session', 'model', 'idModel'));
            }
        } else
            return RedirectionManager::abort($this);
    }


    public function actionProfil()
    {
        AdministratorSessionManager::setProfile();
        return $this->render('profile');
    }

    public function actionModifierProfil()
    {
        AdministratorSessionManager::setProfile();

        $socialModel = new UpdateSocialInformationForm();
        $passwordModel = new UpdatePasswordForm();

        $socialModel->attributes = [
            'username' => $this->administrator->username,
            'name' => $this->user->name,
            'first_name' => $this->user->first_name,
            'tel' => $this->user->tel,
            'email' => $this->user->email,
            'address' => $this->user->address,
        ];

        return $this->render('update_profile', compact('socialModel', 'passwordModel'));
    }

    public function actionModifierInformationSociale()
    {
        if (\Yii::$app->request->getIsPost()) {
            $socialModel = new UpdateSocialInformationForm();
            $passwordModel = new UpdatePasswordForm();

            if ($socialModel->load(\Yii::$app->request->post()) && $socialModel->validate()) {
                $administrator = Administrator::findOne(['username' => $socialModel->username]);
                if ($administrator && $administrator->id != $this->administrator->id) {

                    $socialModel->addError("username", "Ce nom d'utilisateur est déjà utilisé");
                    return $this->render('update_profile', compact('socialModel', 'passwordModel'));
                } else {
                    $this->user->name = $socialModel->name;
                    $this->user->first_name = $socialModel->first_name;
                    $this->user->tel = $socialModel->tel;
                    $this->user->email = $socialModel->email;
                    $this->user->address = $socialModel->address;
                    /* if (UploadedFile::getInstance($socialModel,"avatar"))
                         $this->user->avatar = FileManager::storeAvatar( UploadedFile::getInstance($socialModel,"avatar"),$socialModel->username,"ADMINISTRATOR");*/
                    if (UploadedFile::getInstance($socialModel, "avatar")) {
                        $this->user->avatar = UploadedFile::getInstance($socialModel, 'avatar');
                        $this->user->avatar->saveAs('img/upload/' . $this->user->avatar->basename . '.' . $this->user->avatar->extension);
                        $socialModel->avatar = $this->user->avatar->basename . '.' . $this->user->avatar->extension;
                    } else {
                        $this->user->avatar = null;
                    }
                    $this->user->save();
                    $this->administrator->username = $socialModel->username;
                    $this->administrator->save();
                    return $this->redirect("@administrator.profile");
                }
            } else
                return $this->render('update_profile', compact('socialModel', 'passwordModel'));

        } else {
            return RedirectionManager::abort($this);;
        }
    }

    public function actionModifierMotDePasse()
    {
        if (\Yii::$app->request->getIsPost()) {
            $socialModel = new UpdateSocialInformationForm();
            $socialModel->attributes = [
                'username' => $this->administrator->username,
                'name' => $this->user->name,
                'first_name' => $this->user->first_name,
                'tel' => $this->user->tel,
                'email' => $this->user->email,
            ];

            ///problème on y arrive à modifier les mots de passe 

            $passwordModel = new UpdatePasswordForm();
            if ($passwordModel->load(\Yii::$app->request->post()) && $passwordModel->validate()) {
                if ($this->user->validatePassword($passwordModel->password)) {
                    $this->user->password = Yii::$app->getSecurity()->generatePasswordHash($passwordModel->new_password);
                    $this->user->save();
                    return $this->redirect("@administrator.profile");
                } else {
                    $passwordModel->addError('password', 'Le mot de passe ne correspond pas.');
                    return $this->render('update_profile', compact('socialModel', 'passwordModel'));
                }

            } else
                return $this->render('update_profile', compact('socialModel', 'passwordModel'));

        } else
            return RedirectionManager::abort($this);;
    }


    public function actionTypesAide()
    {
        AdministratorSessionManager::setHelps();
        $helpTypes = HelpType::find()->where(['active' => true])->all();
        return $this->render('help_types', compact('helpTypes'));
    }

    public function actionModifierTypeAide($q = 0)
    {
        if ($q) {
            $model = new HelpTypeForm();

            $helpType = HelpType::findOne($q);
            if ($helpType && $helpType->active) {
                $model->id = $helpType->id;
                $model->title = $helpType->title;
                $model->amount = $helpType->amount;
                return $this->render('update_help_type', compact('model'));
            } else {
                return RedirectionManager::abort($this);
            }
        } else {
            return RedirectionManager::abort($this);
        }
    }

    public function actionAppliquerModificationTypeAide()
    {
        if (Yii::$app->request->getIsPost()) {
            $model = new HelpTypeForm();

            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $helpType = HelpTypeForm::findOne($model->id);
                $helpType->title = $model->title;
                $helpType->amount = $model->amount;
                $helpType->save();
                return $this->render('update_help_type', compact('model'));
            } else {
                return $this->render('update_help_type', compact('model'));
            }
        } else
            return RedirectionManager::abort($this);
    }

    public function actionSupprimerTypeAide()
    {
        if (Yii::$app->request->getIsPost()) {
            $model = new HelpTypeForm();
            $model->load(Yii::$app->request->post());
            if ($model->id) {
                $helpType = HelpType::findOne($model->id);
                if ($helpType) {
                    $helpType->active = false;
                    $helpType->delete();
                    return $this->redirect("@administrator.help_types");
                } else
                    return RedirectionManager::abort($this);
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    public function actionNouveauTypeAide()
    {
        AdministratorSessionManager::setHelps();
        $model = new HelpTypeForm();
        return $this->render('new_help_type', compact('model'));
    }

    public function actionAjouterTypeAide()
    {
        if (\Yii::$app->request->getIsPost()) {
            $model = new HelpTypeForm();

            $newModel = new HelpType();

            if ($model->load(Yii::$app->request->post()) && $newModel->validate()) {
                $helpType = new HelpType();
                $helpType->title = $model->title;
                $helpType->amount = $model->amount;
                $helpType->save();
                if ($helpType->save()) {
                    Yii::$app->session->setFlash('success', "Type d'aide créé avec succès");
                } else {
                    Yii::$app->session->setFlash('error', "Ce type d'aide existe déjà");
                }
                return $this->redirect('@administrator.help_types');
            } else
                return $this->render('new_help_type', compact('model'));

        } else {
            return RedirectionManager::abort($this);
        }
    }


    /*****deconnexion de l'administration  ***********************************************************
     *
     * important
     */
    public function actionDeconnexion()
    {
        if (\Yii::$app->request->post()) {
            \Yii::$app->user->logout();
            return $this->redirect('@guest.connection');
        } else {
            return RedirectionManager::abort($this);
        }
    }

    public function actionMembres()
    {
        AdministratorSessionManager::setMembers();
        $members = Member::find()->all();
        return $this->render('members', compact('members'));
    }

    /********************************action Nouveau Membre ***************************************** */
    public function actionNouveauMembre()
    {
        AdministratorSessionManager::setMembers();
        $model = new NewMemberForm();
        return $this->render('new_member', ['model' => $model]);
    }

    /********************action création d'un nouvel administrateur ************************************** */
    public function actionNouvelAdministrateur()
    {
        if ($this->administrator->root) {
            $model = new NewAdministratorForm();
            return $this->render("new_administrator", compact('model'));
        } else
            return RedirectionManager::abort($this);
    }


    /*******************************ajouter un nouvel administrateur *********************************************** */
    public function actionAjouterAdministrateur()
    {
        if (Yii::$app->request->post() && $this->administrator->root) {
            $model = new NewAdministratorForm();

            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                if (!Administrator::findOne(['username' => $model->username])) {
                    $user = new User();
                    $user->name = $model->name;
                    $user->first_name = $model->first_name;
                    $user->tel = $model->tel;
                    $user->email = $model->email;
                    $user->address = $model->address;
                    $user->type = "ADMINISTRATOR";
                    $user->password = (new Security())->generatePasswordHash($model->password);
                    /* if (UploadedFile::getInstance($model,'avatar'))
                         $user->avatar = FileManager::storeAvatar(UploadedFile::getInstance($model,'avatar'),$model->username,'MEMBER');
                     else
                         $user->avatar = null;*/
                    if (UploadedFile::getInstance($model, 'avatar')) {
                        $user->avatar = UploadedFile::getInstance($model, 'avatar');
                        $user->avatar->saveAs('img/upload/' . $user->avatar->basename . '.' . $user->avatar->extension);
                        $model->avatar = $user->avatar->basename . '.' . $user->avatar->extension;
                    } else {
                        $user->avatar = null;
                    }
                    $user->save();

                    $administrator = new Administrator();
                    $administrator->user_id = $user->id;
                    $administrator->root = false;
                    $administrator->username = $model->username;
                    $administrator->save();

                    return $this->redirect('@administrator.administrators');
                } else {
                    $model->addError('username', 'Ce nom d\'utilisateur est déjà pris');
                    return $this->render('new_administrator', compact('model'));
                }
            } else
                return $this->render('new_administrator', compact("model"));
        } else
            return RedirectionManager::abort($this);
    }

    /**********************************Ajouter un membre dans la mutuelle
     * dans cette partie nous pouvons ajouter en utilisant le mail mananger pour terminer
     * la procedure d'inscription
     * /* ********************************************************************* */
    public function actionAjouterMember()
    {
        if (\Yii::$app->request->post()) {
            $model = new NewMemberForm();

            if ($model->load(\Yii::$app->request->post()) && $model->validate()) {
                if (!Member::findOne(['username' => $model->username])) {
                    $user = new User();
                    $user->name = $model->name;
                    $user->first_name = $model->first_name;
                    $user->tel = $model->tel;
                    $user->email = $model->email;
                    $user->address = $model->address;
                    $user->type = "MEMBER";
                    $user->password = (new Security())->generatePasswordHash($model->password);
                    /* if (UploadedFile::getInstance($model,'avatar'))
                         $user->avatar = FileManager::storeAvatar(UploadedFile::getInstance($model,'avatar'),$model->username,'MEMBER');
                     else
                         $user->avatar = null;*/

                    if (UploadedFile::getInstance($model, 'avatar')) {
                        $user->avatar = UploadedFile::getInstance($model, 'avatar');
                        $user->avatar->saveAs('img/upload/' . $user->avatar->basename . '.' . $user->avatar->extension);
                        $model->avatar = $user->avatar->basename . '.' . $user->avatar->extension;
                    } else {
                        $user->avatar = null;
                    }
                    $user->save();
                    /** try{
                     *
                     *
                     * if ($model->load(Yii::$app->request->post()) && $model->inscriptionmail(Yii::$app->params['adminEmail']))
                     * {
                     * Yii::$app->session->setFlash('contactFormSubmitted');
                     *
                     * return $this->refresh();
                     * }
                     * }catch (Swift_TransportException $e){
                     *
                     * return $this->redirect('@administrator.members');
                     *
                     * }**/

                    $member = new Member();
                    $member->administrator_id = $this->administrator->id;
                    $member->user_id = $user->id;
                    $member->username = $model->username;
                    $member->inscription = SettingManager::getInscription();
                    $member->save();

                    /***MailManager::alert_new_member($user,$member);****/


                    /*try{
                         Yii::$app->mailer->compose()
                         ->setTo($user->email)
                         ->setFrom('jasonmfououoyono@gmail.com')
                         ->setSubject('Confirmation de création de compte de membre')
                         ->setTextBody("Bienvenue à la mutuelle des enseignants de l'école nationale supérieure polytechnique de Yaoundé")
                         ->send();
                     }catch(Swift_TransportException $e)*/
                    /* {
                         return $this->redirect('@administrator.members');
                     }*/

                    return $this->redirect('@administrator.members');
                }
                $model->addError('username', 'Ce nom d\'utilisateur est déjà pris');
                return $this->render('new_member', compact('model'));
            }
            return $this->render('new_member', compact('model'));

        } else {
            return RedirectionManager::abort($this);
        }

    }

    /*******************************action administrateur ********************************************************************* */
    public function actionAdministrateurs()
    {
        AdministratorSessionManager::setAdministrators();

        $administrators = Administrator::find()->all();
        return $this->render("administrators", compact("administrators"));
    }

    /*************************action Epargne **************************************************** */
    public function actionEpargnes()
    {
        AdministratorSessionManager::setHome("saving");
        $model = new NewSavingForm();

        $query = Session::find();
        $pagination = new Pagination([
            'defaultPageSize' => 5,
            'totalCount' => $query->count(),
        ]);

        $sessions = $query->orderBy(['created_at' => SORT_DESC])
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();


        return $this->render("savings", compact("model", "sessions", "pagination"));
    }

    /***********************************création d'une nouvelle épargne*************************************************************** */
    public function actionNouvelleEpargne()
    {
        if (Yii::$app->request->getIsPost()) {

            $query = Session::find();
            $pagination = new Pagination([
                'defaultPageSize' => 5,
                'totalCount' => $query->count(),
            ]);

            $sessions = $query->orderBy(['created_at' => SORT_DESC])
                ->offset($pagination->offset)
                ->limit($pagination->limit)
                ->all();

            $model = new NewSavingForm();
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $member = Member::findOne($model->member_id);
                $session = Session::findOne($model->session_id);
                if ($member && $session && ($session->state == "SAVING")) {
                    $saving = new Saving();

                    $savi = Saving::findOne(['session_id' => $session->id, 'member_id' => $member->id]);
                    if ($savi) {
                        $savi->amount += $model->amount;
                        $savi->save();
                    } else {
                        $saving->member_id = $model->member_id;
                        $saving->session_id = $model->session_id;
                        $saving->amount = $model->amount;
                        $saving->administrator_id = $this->administrator->id;
                        $saving->save();
                    }

                    return $this->redirect("@administrator.savings");
                } else
                    return RedirectionManager::abort($this);
            } else return $this->render("savings", compact("model", "pagination", "sessions"));
        } else
            return RedirectionManager::abort($this);
    }

    /*********************************action sur les remboursements **************************************************** */
    public function actionRemboursements()
    {
        AdministratorSessionManager::setHome("refund");

        $model = new NewRefundForm();

        $query = Session::find();
        $pagination = new Pagination([
            'defaultPageSize' => 5,
            'totalCount' => $query->count(),
        ]);

        $sessions = $query->orderBy(['created_at' => SORT_DESC])
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        return $this->render("refunds", compact("model", "sessions", "pagination"));
    }

    /******************************création de nouveau Remboursement **************************************************** */
    public function actionNouveauRemboursement()
    {
        if (Yii::$app->request->getIsPost()) {

            $query = Session::find();
            $pagination = new Pagination([
                'defaultPageSize' => 5,
                'totalCount' => $query->count(),
            ]);

            $sessions = $query->orderBy(['created_at' => SORT_DESC])
                ->offset($pagination->offset)
                ->limit($pagination->limit)
                ->all();

            $model = new NewRefundForm();
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $member = Member::findOne($model->member_id);
                $session = Session::findOne($model->session_id);
                if ($member && $session && ($session->state == "REFUND")) {

                    $borrowing = Borrowing::findOne(['member_id' => $member->id, 'state' => true]);
                    $refundedAmount = FinanceManager::borrowingRefundedAmount($borrowing);

                    $intendedAmount = FinanceManager::intendedAmountFromBorrowing($borrowing);
                    $q = floor($intendedAmount);

                    if ($model->amount + $refundedAmount < $intendedAmount) {
                        $refund = new Refund();
                        $refund->borrowing_id = $borrowing->id;
                        $refund->session_id = $model->session_id;
                        $refund->amount = $model->amount;
                        $refund->administrator_id = $this->administrator->id;
                        $refund->save();

                        return $this->redirect("@administrator.refunds");

                    } elseif ($model->amount + $refundedAmount == $q) {
                        $refund = new Refund();
                        $refund->borrowing_id = $borrowing->id;
                        $refund->session_id = $model->session_id;
                        $refund->amount = $intendedAmount - $refundedAmount;
                        $refund->administrator_id = $this->administrator->id;
                        $refund->save();

                        $borrowing->state = false;
                        $borrowing->save();
                        return $this->redirect("@administrator.refunds");
                    } else {
                        $model->addError('amount', 'Le montant entré est supérieur au reste à payer');
                        return $this->render("refunds", compact("model", "pagination", "sessions"));
                    }
                } else
                    return RedirectionManager::abort($this);
            } else return $this->render("refunds", compact("model", "pagination", "sessions"));
        } else
            return RedirectionManager::abort($this);

    }

    /***********************action sur les Emprunts **************************************** */
    public function actionEmprunts()
    {
        AdministratorSessionManager::setHome("borrowing");

        $model = new NewBorrowingForm();

        $query = Session::find();
        $pagination = new Pagination([
            'defaultPageSize' => 5,
            'totalCount' => $query->count(),
        ]);

        $sessions = $query->orderBy(['created_at' => SORT_DESC])
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        return $this->render("borrowings", compact("model", "sessions", "pagination"));
    }

    /*********************************création d'un nouvel emprunt ********************************************************************* */
    public function actionNouvelleEmprunt()
    {
        if (Yii::$app->request->getIsPost()) {
            $query = Session::find();
            $pagination = new Pagination([
                'defaultPageSize' => 5,
                'totalCount' => $query->count(),
            ]);

            $sessions = $query->orderBy(['created_at' => SORT_DESC])
                ->offset($pagination->offset)
                ->limit($pagination->limit)
                ->all();

            $model = new NewBorrowingForm();

            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $member = Member::findOne($model->member_id);
                $session = Session::findOne($model->session_id);
                if ($member && $session && $session->state == "BORROWING" && FinanceManager::numberOfSession() < 12) {
                    if (!Borrowing::findOne(['member_id' => $member->id, 'state' => true])) {
                        $exercise = Exercise::findOne(['active' => 1]);
                        $sessionss = Session::find()->select('id')->where(['exercise_id' => $exercise->id])->column();
                        if ($model->amount <= $this->savingofmember($member, $sessionss)) {
                            $borrowing = new Borrowing();

                            $borrowing->interest = SettingManager::getInterest();
                            $borrowing->amount = $model->amount;
                            $borrowing->member_id = $model->member_id;
                            $borrowing->administrator_id = $this->administrator->id;
                            $borrowing->session_id = $model->session_id;
                            $borrowing->save();


                            $totalSavedAmount = FinanceManager::totalSavedAmount();

                            foreach (FinanceManager::exerciseSavings() as $saving) {
                                $borrowingSaving = new BorrowingSaving();
                                $borrowingSaving->saving_id = $saving->id;
                                $borrowingSaving->borrowing_id = $borrowing->id;
                                $borrowingSaving->percent = 100.0 * ((double)$saving->amount) / $totalSavedAmount;
                                $borrowingSaving->save();
                            }
                            return $this->redirect('@administrator.borrowings');
                        } else {
                            $model->addError('amount', 'Le montant demandé est supérieur au montant total des épargnes de ce membre : ' . $this->savingofmember($member, $sessionss) . ' XAF');
                            return $this->render("borrowings", compact("model", "sessions", "pagination"));
                        }

                    } else {
                        $model->addError('member_id', 'Ce membre a déjà contracté un emprunt');
                        return $this->render("borrowings", compact("model", "sessions", "pagination"));
                    }
                } else
                    return RedirectionManager::abort($this);
            } else
                return $this->render("borrowings", compact("model", "sessions", "pagination"));
        } else
            return RedirectionManager::abort($this);
    }


    /*******************************action sur des sesions ******************************************************************* * */
    public function actionSessions()
    {
        AdministratorSessionManager::setHome("session");

        $query = Exercise::find();
        $pagination = new Pagination([
            'defaultPageSize' => 1,
            'totalCount' => $query->count(),
        ]);

        $exercises = $query->orderBy(['created_at' => SORT_DESC])
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();
        return $this->render("sessions", compact('exercises', 'pagination'));
    }

    /****************************Details sur les sessions ****************************************************************** */
    public function actionDetailsSession($q = 0)
    {
        if ($q) {
            $session = Session::findOne($q);
            if ($session) {
                return $this->render("details_session", compact('session'));
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /*******************************actions sur les exercices******************************************* */
    public function actionExercices()
    {
        AdministratorSessionManager::setHome("exercise");
        $query = Exercise::find();
        $pagination = new Pagination([
            'defaultPageSize' => 1,
            'totalCount' => $query->count(),
        ]);

        $exercises = $query->orderBy(['created_at' => SORT_DESC])
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();
        return $this->render('exercises', compact('exercises', 'pagination'));
    }

    /****************************dettes au cours des exercices******************************************* */
    public function actionDettesExercices()
    {
        AdministratorSessionManager::setHome("exercise_debt");


        return $this->render('exercise_debts');
    }

    /**************************passer aux remboursements ************************************ * */
    public function actionPasserAuxRemboursements($q = 0)
    {
        if ($q) {
            $session = Session::findOne($q);
            if ($session && $session->active) {
                $session->state = "REFUND";
                $session->save();

                return $this->redirect("@administrator.home");
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /************************************passer aux emprunts ************************************************************ */
    public function actionPasserAuxEmprunts($q = 0)
    {
        if ($q) {
            $session = Session::findOne($q);
            if ($session && $session->active) {
                $session->state = "BORROWING";
                $session->save();
                return $this->redirect("@administrator.home");
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);

    }

    /************************************cloturer une Session************************************************************ */
    public function actionCloturerSession($q = 0)
    {
        if ($q) {
            $session = Session::findOne($q);
            if ($session && $session->active) {
                $session->state = "END";
                $session->active = false;
                $session->save();

                Yii::$app->db->createCommand('UPDATE borrowing SET interest=interest+:val WHERE session_id!=:session_id AND state=1 ', [
                    ':val' => SettingManager::getInterest(),
                    ':session_id' => $session->id,
                ])->execute();


                foreach (Member::find()->all() as $member) {
                    MailManager::alert_end_session($member->user(), $member, $session);
                }

                return $this->redirect("@administrator.home");
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);

    }

    /********************************cloturer un exercice ********************************************************************** */
    public function actionCloturerExercice($q = 0)
    {
        if ($q) {
            $session = Session::findOne($q);
            if ($session && $session->active) {
                if (FinanceManager::numberOfSession() == 12) {
                    $exercise = Exercise::findOne(['active' => true]);
                    $lastSession = Session::find()->orderBy(['created_at' => SORT_DESC])->where(['exercise_id' => $exercise])->one();
                    if ($lastSession->id == $session->id) {
                        foreach (FinanceManager::notRefundedBorrowings() as $borrowing) {
                            $intendedAmount = FinanceManager::intendedAmountFromBorrowing($borrowing);
                            $refundedAmount = FinanceManager::borrowingRefundedAmount($borrowing);

                            $refund = new Refund();

                            $refund->borrowing_id = $borrowing->id;
                            $refund->session_id = $session->id;
                            $refund->administrator_id = $this->administrator->id;
                            $refund->amount = $intendedAmount - $refundedAmount;
                            $refund->exercise_id = $exercise->id;
                            $refund->save();

                            $borrowing->state = false;
                            $borrowing->save();
                        }

                        $session->active = false;
                        $session->state = "END";

                        $session->save();

                        $exercise->active = false;

                        $exercise->save();
                        foreach (Member::find()->all() as $member) {
                            MailManager::alert_end_exercise($member->user(), $member, $exercise);
                        }
                        return $this->redirect("@administrator.exercises");
                    } else
                        return RedirectionManager::abort($this);
                } else
                    return RedirectionManager::abort($this);
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /**************************rentrer aux remboursements ****************************************************************** */
    public function actionRentrerAuxRemboursements($q = 0)
    {
        if ($q) {
            $session = Session::findOne($q);
            if ($session && $session->active) {
                $borrowings = Borrowing::findAll(['session_id' => $session->id]);
                foreach ($borrowings as $borrowing) {
                    Yii::$app->db->createCommand()->delete('borrowing_saving', ['borrowing_id' => $borrowing->id])->execute();
                    $borrowing->delete();
                }

                $session->state = "REFUND";
                $session->save();

                return $this->redirect("@administrator.home");
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);

    }

    /*******************************rentrer aux epargnes ************************************************************* */
    public function actionRentrerAuxEpargnes($q = 0)
    {
        if ($q) {
            $session = Session::findOne($q);
            if ($session && $session->active) {
                $refunds = Refund::findAll(['session_id' => $q]);
                foreach ($refunds as $refund) {
                    $borrowing = Borrowing::findOne($refund->borrowing_id);
                    $borrowing->state = true;
                    $borrowing->save();
                    $refund->delete();
                }

                $session->state = "SAVING";
                $session->save();
                return $this->redirect("@administrator.home");
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);

    }

    /**************************gestion des Dettes********************************************************** */
    public function actionTraiterDette($q = 0)
    {
        if ($q) {
            $refund = Refund::findOne($q);
            if ($refund && $refund->exercise_id) {
                $refund->exercise_id = null;
                $refund->save();
                return $this->redirect("@administrator.exercise_debts");
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /****************************action des membres de la mutuelle **************************************** */
    public function actionMembre($q = 0)
    {
        if ($q) {
            $member = Member::findOne($q);

            if ($member) {
                return $this->render("member", compact("member"));
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /****************************epargne des membres de la mutuelle******************************************************************* */
    public function actionEpargneMembre($q = 0)
    {
        if ($q) {
            $member = Member::findOne($q);
            if ($member) {
                $query = Exercise::find();
                $pagination = new Pagination([
                    'defaultPageSize' => 1,
                    'totalCount' => $query->count(),
                ]);

                $exercises = $query->orderBy(['created_at' => SORT_DESC])
                    ->offset($pagination->offset)
                    ->limit($pagination->limit)
                    ->all();
                return $this->render("saving_member", compact("member", "exercises", "pagination"));
            } else
                return RedirectionManager::abort($this);
        } else {
            return RedirectionManager::abort($this);
        }
    }

    /*****************************emprunt des membres ************************************************************** */
    public function actionEmpruntMembre($q = 0)
    {
        if ($q) {
            $member = Member::findOne($q);
            if ($member) {
                $query = Exercise::find();
                $pagination = new Pagination([
                    'defaultPageSize' => 1,
                    'totalCount' => $query->count(),
                ]);

                $exercises = $query->orderBy(['created_at' => SORT_DESC])
                    ->offset($pagination->offset)
                    ->limit($pagination->limit)
                    ->all();
                return $this->render("borrowing_member", compact("member", "exercises", "pagination"));
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /***************************contribution des membres ************************************************************* */
    public function actionContributionMembre($q = 0)
    {
        if ($q) {
            $member = Member::findOne($q);
            if ($member) {
                $contributions = Contribution::find()->where(['member_id' => $q])->orderBy(['created_at' => SORT_DESC])->all();
                return $this->render("contribution_member", compact("member", "contributions"));
            } else
                RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /*****************************nouvelle aide côté administrateur ******************************************* */
    public function actionNouvelleAide()
    {
        AdministratorSessionManager::setHome("help");
        $model = new NewHelpForm();
        return $this->render("new_help", compact("model"));
    }

    /********************************ajouter une aide ********************************************************** */
    public function actionAjouterAide()
    {
        if (Yii::$app->request->getIsPost()) {
            $model = new NewHelpForm();
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $d1 = (new DateTime())->getTimestamp();
                $d2 = (new DateTime($model->limit_date))->getTimestamp();

                $member = Member::findOne($model->member_id);
                $help_type = HelpType::findOne($model->help_type_id);

                if ($member && $help_type && $member->active) {
                    //vérifier si le membre a déjà fait un emprunt
                    if (!Borrowing::findOne(['member_id' => $member->id, 'state' => true])) {

                        if ($d1 <= $d2 + 86400000 * 30) {
                            $help = new Help();
                            $help->limit_date = $model->limit_date;
                            $help->help_type_id = $model->help_type_id;
                            $help->member_id = $model->member_id;
                            $help->comments = $model->comments;
                            $help->state = true;
                            $help->administrator_id = $this->administrator->id;

                            $members = Member::find()->where(['!=', 'id', $model->member_id])->andWhere(['active' => true])->all();

                            $unit_amount = (int)ceil((double)($help_type->amount) / count($members));
                            $amount = $unit_amount * count($members);

                            $help->amount = $amount;
                            $help->unit_amount = $unit_amount;
                            $help->save();

                            foreach ($members as $member) {
                                $contribution = new Contribution();
                                $contribution->state = false;
                                $contribution->member_id = $member->id;
                                $contribution->help_id = $help->id;
                                $contribution->save();
                                MailManager::alert_new_help($member->user(), $member, $help, $help_type);
                            }

                            return $this->redirect("@administrator.helps");
                        } else {
                            $model->addError("limit_date", "Le délai minimum est d'un mois");
                            return $this->render("new_help", compact("model"));
                        }

                    } else
                        $model->addError("member_id", "ce membre a doit rembourser son emprunt avant de bénéficier d'une aide");
                    return $this->render("new_help", compact("model"));
                } else
                    return RedirectionManager::abort($this);

            } else
                return $this->render("new_help", compact("model"));
        } else
            return RedirectionManager::abort($this);
    }

    /***********************************Details Aider côté administrateur ******************************************************* */
    public function actionDetailsAide($q = 0)
    {
        if ($q) {
            $help = Help::findOne($q);
            if ($help) {

                return $this->render("help_details", compact("help"));
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /************************nouvelle contribution dans la mutuelle ****************************************************** */
    public function actionNouvelleContribution($q = 0)
    {
        if ($q) {
            $help = Help::findOne($q);
            if ($help && $help->state) {
                $model = new NewContributionForm();
                $model->help_id = $q;
                return $this->render("new_contribution", compact("model"));
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /*************************ajouter des contributions ****************************************************** */
    public function actionAjouterContribution()
    {
        if (Yii::$app->request->getIsPost()) {
            $model = new NewContributionForm();
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $member = Member::findOne($model->member_id);
                $help = Help::findOne($model->help_id);
                if ($member && $help && $help->state) {
                    $contribution = Contribution::findOne(['member_id' => $model->member_id, 'help_id' => $model->help_id]);
                    if ($contribution && !$contribution->state) {
                        $contribution->state = true;
                        $contribution->date = $model->date;
                        $contribution->administrator_id = $this->administrator->id;
                        $contribution->save();

                        if ($help->contributedAmount() == $help->amount) {
                            $help->state = false;
                            $help->save();
                        }

                        return $this->redirect(["@administrator.help_details", 'q' => $help->id]);
                    } else
                        return RedirectionManager::abort($this);
                } else {
                    return RedirectionManager::abort($this);
                }
            } else
                return $this->render("new_contribution", compact('model'));
        } else
            return RedirectionManager::abort($this);
    }

    /******************************aide du côté Administrateur *************************************************** */
    public function actionAides()
    {
        AdministratorSessionManager::setHome("help");

        $activeHelps = Help::findAll(['state' => true]);

        $query = Help::find()->where(['state' => false])->orderBy('created_at', SORT_DESC);

        $pagination = new Pagination([
            'defaultPageSize' => 9,
            'totalCount' => $query->count(),
        ]);

        $helps = $query
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        return $this->render("helps", compact("helps", 'pagination', "activeHelps"));
    }

    /********************************desactiver les membres ******************************************************* */
    public function actionDesactiverMembre($q = 0)
    {
        if ($q) {
            $member = Member::findOne($q);
            if ($member && $member->active) {
                $member->active = false;
                $member->save();

                return $this->redirect(["@administrator.member", 'q' => $q]);
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /************************supprimer les membres de la mutuelle **************************************************** */
    public function actionSupprimerMembre($q = 0)
    {
        $member = Member::findOne($q);
        if ($member) {
            $member->active = false;
            $member->delete();
            return $this->redirect("@administrator.members");

        }


        /*if(Member::find()->where(['q'=>$q])->exists()){
            $model=Member::find()->where(['q'=>$q]);
            if($model->delete()){
                return $this->redirect("@administrator.members");

            }

        }*/
    }

    /* if ($member) {
         $member = $member->member();
         if ($member && $member->active && $member->state == "MEMBER") {
             $member->delete();
             return $this->redirect("@administrator.members");
         }
         else
             return RedirectionManager::abort($this);
     }
     else
         return RedirectionManager::abort($this);
 }
 else
     return RedirectionManager::abort($this);
}*/
    /*****************************activer les membres de la mutuelle ************************************************* */
    public function actionActiverMembre($q = 0)
    {
        if ($q) {
            $member = Member::findOne($q);
            if ($member && !$member->active) {
                $member->active = true;
                $member->save();
                return $this->redirect(["@administrator.member", 'q' => $q]);
            } else return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /********************************supprimer Epargne ***************************************************** */
    public function actionSupprimerEpargne($q = 0)
    {
        if ($q) {
            $saving = Saving::findOne($q);
            if ($saving) {
                $session = $saving->session();
                if ($session && $session->active && $session->state == "SAVING") {
                    $saving->delete();
                    return $this->redirect("@administrator.savings");
                } else
                    return RedirectionManager::abort($this);
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /******************************supprimer remboursement d'un membre *************************************************** */
    public function actionSupprimerRemboursement($q = 0)
    {
        if ($q) {
            $refund = Refund::findOne($q);
            if ($refund) {
                $session = $refund->session();
                if ($session && $session->active && $session->state == "REFUND") {

                    $borrowing = $refund->borrowing();
                    $refund->delete();
                    if (!$borrowing->state) {
                        $borrowing->state == true;
                        $borrowing->save();
                    }
                    return $this->redirect("@administrator.refunds");
                } else
                    return RedirectionManager::abort($this);
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /***************************supprimer les Emprunts******************************************** */
    public function actionSupprimerEmprunt($q = 0)
    {
        if ($q) {
            $borrowing = Borrowing::findOne($q);
            if ($borrowing) {
                $session = $borrowing->session();
                if ($session && $session->state == "BORROWING" && $session->active) {
                    Yii::$app->db->createCommand()->delete('borrowing_saving', ['borrowing_id' => $borrowing->id])->execute();
                    $borrowing->delete();

                    return $this->redirect("@administrator.borrowings");
                } else
                    return RedirectionManager::abort($this);
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /*******************************regler le Fond Social************************************************************* */
    public function actionReglerFondSocial($q = 0)
    {
        if ($q) {
            $member = Member::findOne($q);
            if ($member && ($member->social_crown == 0)) {
                $member->social_crown = SettingManager::getSocialCrown();
                $member->save();
                return $this->redirect("@administrator.exercise_debts");
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /***************************supprimer une aide*********************************************** */

    public function actionSupprimerAide($q = 0)
    {
        $help = Help::findOne($q);
        $contribution = Contribution::findOne($q);
        $member = Member::findOne($q);
        if ($contribution->active = true) {
            return $this->redirect("administrator.helps");
        } else {
            $member = $contribution->member();
            $member->active = false;
            $contribution->active = false;
            $help->active = false;
            $help->delete();
            return $this->redirect("@administrator.helps");

        }


    }

    /******************************configuration************************************************************* */
    public function actionConfigurations()
    {
        AdministratorSessionManager::setSettings();
        $model = new SettingForm();
        $model->interest = SettingManager::getInterest();
        $model->social_crown = SettingManager::getSocialCrown();
        $model->inscription = SettingManager::getInscription();



        return $this->render("settings", compact("model"));
    }


    /*****************************Appliquer les configurations ********************************************************* */
    public function actionAppliquerConfiguration()
    {
        if (Yii::$app->request->getIsPost()) {
            $model = new SettingForm();
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {

                SettingManager::setValues($model->interest, $model->social_crown, $model->inscription);

                return $this->redirect("@administrator.settings");
            } else
                return $this->render("settings", compact("model"));
        } else
            return RedirectionManager::abort($this);
    }

    /*************************enregistrement des membres durant une session************************************************************* */
    public static function savingofmember($member, $sessionss)
    {
        $r = Saving::find()->where(['session_id' => $sessionss, 'member_id' => $member->id])->sum('amount');
        if ($r):
            return $r;
        else:
            return 0;
        endif;
    }

    /**************************************Appliquer Agape***************************************************************/


    public function actionAgape()
    {
        AdministratorSessionManager::setSettings();
        $agapeForm = new AgapeForm();
        $agapeForm->amount = SettingManager::getAgape();

        return $this->render("agape", compact("agapeForm"));
    }


    public function actionAppliquerAgape(){


        if (Yii::$app->request->getIsPost()) {

            $agapeForm = new AgapeForm();

            if ($agapeForm->load(Yii::$app->request->post()) && $agapeForm->validate()) {

                $agapeForm->save();
                SettingManager::setvaluesAgape($agapeForm->amount);


                return $this->redirect("@administrator.agape");
            } else
                return $this->render("agape", compact("agapeForm"));
        } else
            return RedirectionManager::abort($this);




    }

    /*********************************************Appliquer Agape test**********************************************************************/






/***************************************la version teste d'agape **************************************************/




    /********************************************Ajouter une Agape************************************************************************/
    public function actionAjouterAgape()
    {
        if (Yii::$app->request->getIsPost()) {
            $agapeForm = new AgapeForm();
            if ($agapeForm->load(Yii::$app->request->post()) && $agapeForm->validate()) {


                $session = Session::findOne($agapeForm->session_id);

                if ($session) {


                            $agape = new Agape();

                            $agape->amount = $agapeForm->amount;
                            $agape->session_id = $agapeForm->session_id;
                            $agape->save();




                            return $this->redirect("@administrator.agapess");
                        }

                        }

            return $this->render("agape", compact("agapeForm"));
                }


    }










    /********************************************agape************************************************************************************/
    public function actionNouvelleAgape()
    {

        if (Yii::$app->request->getIsPost()) {
            $query = Session::find();
            $pagination = new Pagination([
                'defaultPageSize' => 5,
                'totalCount' => $query->count(),
            ]);

            $sessions = $query->orderBy(['created_at' => SORT_DESC])
                ->offset($pagination->offset)
                ->limit($pagination->limit)
                ->all();

            $agapeForm = new AgapeForm();

            if ($agapeForm->load(Yii::$app->request->post()) && $agapeForm->validate()) {

                $session = Session::findOne($agapeForm->session_id);
                if ($session) {
                        $agapeForm->save();
                        $agape = new Agape();
                        $agape->amount = $agapeForm->amount;
                        $agape->session_id = $agapeForm->session_id;
                        $agape->save();


                        SettingManager::setvaluesAgape($agapeForm->amount);

                        return $this->redirect("@administrator.agape");


                }

            } else
                return $this->render("agape", compact("agapeForm","sessions"));
        } else
            return RedirectionManager::abort($this);
    }



    /*******************************************Type de Tontine********************************************************************************************/


    public function actionTypesTontine(){
            AdministratorSessionManager::setTontine();
            $tontineTypes = TontineType::find()->where(['active' => true])->all();

            return $this->render('tontine_types', compact('tontineTypes'));
    }
/************************************************Modifier le type de tontine *****************************************************************************************************/
    public function actionModifierTypeTontine($q = 0){

        if($q){
            $model = new TontineTypeForm();

            $tontineType = TontineType::findOne($q);
            if($tontineType && $tontineType->active){
                $model->id = $tontineType->id;
                $model->title = $tontineType->title;
                $model->amount = $tontineType->amount;
                return $this->render('update_tontine_type',compact('model'));
            }else{
                return RedirectionManager::abort($this);

            }

        }else {
            return RedirectionManager::abort($this);
        }

    }
/************************************************les tontines **************************************************************************/
    public function actionTontines()
    {
        AdministratorSessionManager::setHome("tontine");

        $activeTontines = Tontine::findAll(['state' => true]);

        $query = Tontine::find()->where(['state' => false])->orderBy('created_at', SORT_DESC);

        $pagination = new Pagination([
            'defaultPageSize' => 9,
            'totalCount' => $query->count(),
        ]);

        $tontines = $query
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        return $this->render("tontines", compact("tontines", 'pagination', "activeTontines"));
    }

/**************************************Détails sur les tontines ***********************************************************************************/
    public function actionDetailsTontine($q = 0)
    {
        if ($q) {
            $tontine = Tontine::findOne($q);
            if ($tontine) {

                return $this->render("tontine_details", compact("tontine"));
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /*****************************nouvelle  tontine côté administrateur ******************************************* */
    public function actionNouvelleTontine()
    {
        AdministratorSessionManager::setHome("tontine");
        $model = new NewTontineForm();
        return $this->render("new_Tontine", compact("model"));
    }

    /********************************ajouter une tontine ********************************************************** */
    public function actionAjouterTontine()
    {
        if (Yii::$app->request->getIsPost()) {
            $model = new NewTontineForm();
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $d1 = (new DateTime())->getTimestamp();
                $d2 = (new DateTime($model->limit_date))->getTimestamp();

                $member = Member::findOne($model->member_id);
                $tontine_type = TontineType::findOne($model->tontine_type_id);

                if ($member && $tontine_type && $member->active) {
                    //vérifier si le membre a déjà fait un emprunt
                    if (!Borrowing::findOne(['member_id' => $member->id, 'state' => true])) {

                        if ($d1 <= $d2 + 86400000 * 30) {
                            $tontine = new Tontine();
                            $tontine->limit_date = $model->limit_date;
                            $tontine->tontine_type_id = $model->tontine_type_id;
                            $tontine->member_id = $model->member_id;
                            $tontine->comments = $model->comments;
                            $tontine->state = true;
                            $tontine->administrator_id = $this->administrator->id;

                            $members = Member::find()->where(['!=', 'id', $model->member_id])->andWhere(['active' => true])->all();

                            $unit_amount = (int)ceil((double)($tontine_type->amount) / count($members));
                            $amount = $unit_amount * count($members);

                            $tontine->amount = $amount;
                            $tontine->unit_amount = $unit_amount;
                            $tontine->save();

                            foreach ($members as $member) {
                                $contribution = new Contribution();
                                $contribution->state = false;
                                $contribution->member_id = $member->id;
                                $contribution->tontine_id = $tontine->id;
                                $contribution->save();
                                /**MailManager::alert_new_tontine($member->user(), $member, $tontine, $tontine_type);**/
                            }

                            return $this->redirect("@administrator.tontines");
                        } else {
                            $model->addError("limit_date", "Le délai minimum est d'un mois");
                            return $this->render("new_tontine", compact("model"));
                        }

                    } else
                        $model->addError("member_id", "ce membre a doit rembourser son emprunt avant de bénéficier d'une aide");
                    return $this->render("new_tontine", compact("model"));
                } else
                    return RedirectionManager::abort($this);

            } else
                return $this->render("new_tontine", compact("model"));
        } else
            return RedirectionManager::abort($this);
    }


    /************************nouvelle contribution dans la mutuelle ****************************************************** */
    public function actionNouvelleContributionTontine($q = 0)
    {
        if ($q) {
            $tontine = Tontine::findOne($q);
            if ($tontine && $tontine->state) {
                $model = new NewContributionForm();
                $model->tontine_id = $q;
                return $this->render("new_contribution", compact("model"));
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    /*************************ajouter des contributions ****************************************************** */
    public function actionAjouterContributionTontine()
    {
        if (Yii::$app->request->getIsPost()) {
            $model = new NewContributionForm();
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $member = Member::findOne($model->member_id);
                $tontine = Tontine::findOne($model->tontine_id);
                if ($member && $tontine && $tontine->state) {
                    $contribution = Contribution::findOne(['member_id' => $model->member_id, 'tontine_id' => $model->tontine_id]);
                    if ($contribution && !$contribution->state) {
                        $contribution->state = true;
                        $contribution->date = $model->date;
                        $contribution->administrator_id = $this->administrator->id;
                        $contribution->save();

                        if ($tontine->contributedAmount() == $tontine->amount) {
                            $tontine->state = false;
                            $tontine->save();
                        }

                        return $this->redirect(["@administrator.tontine_details", 'q' => $tontine->id]);
                    } else
                        return RedirectionManager::abort($this);
                } else {
                    return RedirectionManager::abort($this);
                }
            } else
                return $this->render("new_contribution", compact('model'));
        } else
            return RedirectionManager::abort($this);
    }

    /******************************aide du côté Administrateur *************************************************** */


    public function actionAppliquerModificationTypeTontine()
    {
        if (Yii::$app->request->getIsPost()) {
            $model = new TontineTypeForm();

            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $tontineType = HelpTypeForm::findOne($model->id);
                $tontineType->title = $model->title;
                $tontineType->amount = $model->amount;
                $tontineType->save();
                return $this->render('update_tontine_type', compact('model'));
            } else {
                return $this->render('update_tontine_type', compact('model'));
            }
        } else
            return RedirectionManager::abort($this);
    }

    public function actionSupprimerTypeTontine()
    {
        if (Yii::$app->request->getIsPost()) {
            $model = new TontineTypeForm();
            $model->load(Yii::$app->request->post());
            if ($model->id) {
                $tontineType = TontineType::findOne($model->id);
                if ($tontineType) {
                    $tontineType->active = false;
                    $tontineType->delete();
                    return $this->redirect("@administrator.tontine_types");
                } else
                    return RedirectionManager::abort($this);
            } else
                return RedirectionManager::abort($this);
        } else
            return RedirectionManager::abort($this);
    }

    public function actionNouveauTypeTontine()
    {
        AdministratorSessionManager::setHelps();
        $model = new TontineTypeForm();
        return $this->render('new_tontine_type', compact('model'));
    }

    public function actionAjouterTypeTontine()
    {
        if (\Yii::$app->request->getIsPost()) {
            $model = new TontineTypeForm();

            $newModel = new TontineType();

            if ($model->load(Yii::$app->request->post()) && $newModel->validate()) {
                $tontineType = new TontineType();
                $tontineType->title = $model->title;
                $tontineType->amount = $model->amount;
                $tontineType->save();
                if ($tontineType->save()) {
                    Yii::$app->session->setFlash('success', "Type de Tontine créé avec succès");
                } else {
                    Yii::$app->session->setFlash('error', "Ce type de tontine existe déjà");
                }
                return $this->redirect('@administrator.tontine_types');
            } else
                return $this->render('new_tontine_type', compact('model'));

        } else {
            return RedirectionManager::abort($this);
        }
    }


    public function actionIndex()
    {
        $dataProvider = new \yii\data\ActiveDataProvider([
            'query' => Agape3::find(),
        ]);

        return $this->render('index', ['dataProvider' => $dataProvider]);
    }


    public function actionCreate()
    {
        $model = new Agape3();

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            // Get the session ID and assign it to the model
            $model->session_id = Yii::$app->request->post('Agape3')['session_id'];
            $model->save();

            return $this->redirect(['view', 'id' => $model->primaryKey]);
        }

        // Retrieve the list of sessions for the dropdown
        $sessions = Session::find()->all();

        return $this->render('create', [
            'model' => $model,
            'sessions' => $sessions,
        ]);
    }





    public function actionView($id)
    {
        $model = $this->findModel($id);
        return $this->render('view', ['model' => $model]);
    }

    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            // Get the session ID and assign it to the model
            $model->session_id = Yii::$app->request->post('session_id');
            $model->save();

            return $this->redirect(['view', 'id' => $model->agape_id]);
        }

        // Retrieve the list of sessions for the dropdown
        $sessions = Session::find()->all();

        return $this->render('update', [
            'model' => $model,
            'sessions' => $sessions,
        ]);
    }

    public function actionDelete($id)
    {
        $this->findModel($id)->delete();
        return $this->redirect(['index']);
    }

    protected function findModel($id)
    {
        if (($model = Agape3::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }





}